name: Build and Release

on:
    push:
        branches:
            - main
        paths:
            - "tools/imports/**"

    # Manual trigger
    workflow_dispatch:

permissions:
    contents: write # Allow the action to write to the repository (for creating tags/releases)
    discussions: read # Optional, adjust according to your needs

jobs:
    build:
        runs-on: ubuntu-latest

        concurrency:
            group: build-and-release-${{ github.ref }}
            cancel-in-progress: true

        steps:
            # Step 1: Add a delay (sleep for 15 minutes = 900 seconds), only for push events
            - name: Wait for 15 minutes (only on push)
              if: github.event_name == 'push'
              run: sleep 900

            # Step 2: Checkout the code
            - name: Checkout code
              uses: actions/checkout@v3

            # Step 3: Install GitHub CLI (gh)
            - name: Install GitHub CLI
              run: sudo apt-get install gh

            # Step 4: Check if tag already exists without a release
            - name: Check existing tags
              id: tag_check
              run: |
                  git config --global user.email "github-actions[bot]@users.noreply.github.com"
                  git config --global user.name "github-actions[bot]"

                  # Fetch all tags from remote to ensure we're checking against them
                  git fetch --tags

                  DATE=$(date +'%Y%m%d')
                  EXISTING_TAGS=$(git tag --list "$DATE-*")
                  echo "Debug: Existing Tags: $EXISTING_TAGS"

                  # Start the first tag with -1
                  if [[ -z "$EXISTING_TAGS" ]]; then
                      TAG_TO_USE="$DATE-1"
                  else
                      # Get the highest existing suffix
                      LAST_TAG_SUFFIX=$(echo "$EXISTING_TAGS" | grep -oP "$DATE-\K[0-9]+" | sort -n | tail -n1)
                      NEW_SUFFIX=$((LAST_TAG_SUFFIX+1))
                      TAG_TO_USE="$DATE-$NEW_SUFFIX"
                  fi

                  echo "Debug: Using Tag: $TAG_TO_USE"

                  # Check if the tag exists remotely and push if not
                  if ! git ls-remote --tags origin | grep -q "refs/tags/$TAG_TO_USE"; then
                      git tag $TAG_TO_USE
                      git push origin $TAG_TO_USE
                  fi

                  echo "tag=$TAG_TO_USE" >> $GITHUB_ENV

            
            # Step 5: Modify QuaziiUI/init.lua if DEBUG_MODE is true
            - name: Check and update QuaziiUI.DEBUG_MODE in init.lua
              run: |
                  INIT_FILE="./QuaziiUI/init.lua"
                  
                  if grep -q "QuaziiUI.DEBUG_MODE = true" "$INIT_FILE"; then
                      echo "Debug: DEBUG_MODE is set to true. Updating to false."
                      sed -i 's/QuaziiUI.DEBUG_MODE = true/QuaziiUI.DEBUG_MODE = false/' "$INIT_FILE"
                  else
                      echo "Debug: DEBUG_MODE is already false or not found."
                  fi

            # Step 6: Ensure the version matches the current date in QuaziiUI.toc
            - name: Check and update version in QuaziiUI.toc
              run: |
                  TOC_FILE="./QuaziiUI/QuaziiUI.toc"
                  DATE=$(date +'%Y%m%d')
                  
                  if grep -q "## Version: $DATE" "$TOC_FILE"; then
                      echo "Debug: Version is already up to date ($DATE)."
                  else
                      echo "Debug: Updating version to $DATE."
                      sed -i "s/## Version:.*/## Version: $DATE/" "$TOC_FILE"
                  fi

            # Step 5: Run build.py
            - name: Run build.py
              run: python tools/build.py

            # Step 6: Zip the QuaziiUI directory
            - name: Zip QuaziiUI directory
              run: |
                  echo "Debug: Zipping QuaziiUI directory with tag ${{ env.tag }}"
                  zip -r QuaziiUI.zip QuaziiUI

            # Step 7: Generate changelog from commit messages since last tag
            - name: Generate changelog
              run: |
                  # Check if there are any tags
                  if git describe --tags --abbrev=0 > /dev/null 2>&1; then
                      LAST_TAG=$(git describe --tags --abbrev=0)
                      echo "Debug: Last tag found: $LAST_TAG"
                      echo "Changes since $LAST_TAG:" > CHANGELOG.md
                      git log $LAST_TAG..HEAD --oneline >> CHANGELOG.md
                  else
                      # If no tags exist, generate changelog for all commits
                      echo "Debug: No tags found, generating changelog for all commits."
                      echo "Changes since the beginning:" > CHANGELOG.md
                      git log --oneline >> CHANGELOG.md
                  fi

            - name: Output changelog
              id: changelog
              run: |
                  echo "Debug: Generated changelog content"
                  cat CHANGELOG.md

            # Step 8: Check if the release already exists
            - name: Check if Release Exists
              id: release_check
              run: |
                  echo "Debug: Checking if the release exists for tag ${{ env.tag }}"
                  if git tag --list | grep -q "${{ env.tag }}"; then
                      echo "Debug: Tag ${{ env.tag }} exists."
                      if gh release view ${{ env.tag }} > /dev/null 2>&1; then
                          echo "Debug: Release for tag ${{ env.tag }} already exists."
                          echo "release_exists=true" >> $GITHUB_ENV
                      else
                          echo "Debug: Release for tag ${{ env.tag }} does not exist."
                          echo "release_exists=false" >> $GITHUB_ENV
                      fi
                  else
                      echo "Debug: Tag ${{ env.tag }} does not exist."
                      echo "release_exists=false" >> $GITHUB_ENV
                  fi

            # Step 9: Check and Delete Existing Asset
            - name: Check and Delete Existing Asset
              if: env.release_exists == 'false'
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Set GH_TOKEN here
              run: |
                  ASSET_NAME="QuaziiUI.zip"
                  echo "Debug: Checking for existing asset: $ASSET_NAME"
                  EXISTING_ASSET_ID=$(gh release view ${{ env.tag }} --json assets --jq ".assets | .[] | select(.name == \"$ASSET_NAME\") | .id" || true)
                  echo "Debug: Existing Asset ID: $EXISTING_ASSET_ID"

                  if [ ! -z "$EXISTING_ASSET_ID" ]; then
                    echo "Debug: Deleting existing asset: $ASSET_NAME"
                    gh release delete-asset ${{ env.tag }} $EXISTING_ASSET_ID --yes
                  else
                    echo "Debug: No existing asset named $ASSET_NAME found in release ${{ env.tag }}."
                  fi

            # Step 10: Create or update a GitHub Release using gh CLI
            - name: Create or Update GitHub Release
              if: env.release_exists == 'false'
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Set GH_TOKEN here
              run: |
                  echo "Debug: Creating release for tag ${{ env.tag }}"
                  gh release create ${{ env.tag }} \
                    QuaziiUI.zip \
                    --title "QuaziiUI ${{ env.tag }}" \
                    --notes-file CHANGELOG.md \
                    --target main
